mutate(date = date(datetime)) %>%
select(-datetime) %>%
group_by(date) %>%
summarise(across(.fns=mymean)) %>%
write_csv("data/senjo/predicted/2020_daily.csv")
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020_daily.csv.csv")
# とりあえずプロット
df %>%
select(datetime, above, below) %>%
slice(1:200) %>%
pivot_longer(-datetime, "window", values_to="cloudiness") %>%
ggplot(aes(x=datetime, y=cloudiness)) +
geom_line(aes(color=window))
df
df %>%
mutate(date = date(datetime)) %>%
select(-datetime) %>%
group_by(date) %>%
summarise(across(.fns=mymean))
df %>%
mutate(date = date(datetime)) %>%
select(-datetime) %>%
group_by(date) %>%
summarise(across(.fns=mymean)) %>%
write_csv("data/senjo/predicted/2020_daily.csv")
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020_daily.csv.csv")
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020_daily.csv")
# とりあえずプロット
df %>%
select(datetime, above, below) %>%
slice(1:200) %>%
pivot_longer(-datetime, "window", values_to="cloudiness") %>%
ggplot(aes(x=datetime, y=cloudiness)) +
geom_line(aes(color=window))
df %>%
mutate(date = date(datetime)) %>%
select(-datetime) %>%
group_by(date) %>%
summarise(across(.fns=mymean)) %>%
rename(datetime=date) %>%
write_csv("data/senjo/predicted/2020_daily.csv")
df %>%
mutate(date = date(datetime)) %>%
select(-datetime) %>%
group_by(date) %>%
summarise(across(.fns=mymean)) %>%
rename(date=datetime) %>%
write_csv("data/senjo/predicted/2020_daily.csv")
setwd("~/JpGU2022")
df <- read_csv("data/senjo/predicted/resnet.csv") %>%
select(-X1)
cloudiness <- tibble(
weather = c("clear", "moderate", "cloudy"),
cloudiness = c(0, 1, 2)
)
df <- df %>%
mutate(datetime = ymd_hm(datetime)) %>%
filter(year(datetime)==2020) %>%
arrange(datetime) %>%
left_join(cloudiness, by="weather") %>%
mutate(
above_c = if_else(index < 8, cloudiness, 0),
below_c = if_else(index >= 8, cloudiness, 0)
) %>%
group_by(datetime) %>%
summarise(
above = sum(above_c) / 2,
below = sum(below_c) / 3
)
dt <- tibble(
datetime = seq(ymd_hm("2020-01-01-0000"), ymd_hm("2020-12-31-2300"), by = "hour")
)
df <- dt %>%
left_join(df)
write_csv(df, "data/senjo/predicted/2020.csv")
read_weather <- function(path) {
read_csv(path) %>%
slice(2:nrow(.))
}
weather <- map(list.files("data/senjo/weather/", full.names = T), read_weather) %>%
reduce(left_join) %>%
mutate(datetime = ymd_hms(datetime))
df <- df %>%
left_join(weather)
df %>%
write_csv("data/senjo/predicted/2020.csv")
mymean <- function(x) {
mean(x, na.rm = T)
}
df %>%
mutate(date = date(datetime)) %>%
select(-datetime) %>%
group_by(date) %>%
summarise(across(.fns=mymean)) %>%
rename(datetime=date) %>%
write_csv("data/senjo/predicted/2020_daily.csv")
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020_daily.csv")
# とりあえずプロット
df %>%
select(datetime, above, below) %>%
slice(1:200) %>%
pivot_longer(-datetime, "window", values_to="cloudiness") %>%
ggplot(aes(x=datetime, y=cloudiness)) +
geom_line(aes(color=window))
df <- df %>%
mutate(across(-datetime, scale)) %>%
unnest(-datetime)
block_above <- make_block(
df$above, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
plot(block_above[,2], block_above[,3], type="o", pch=18,
xlab="Above cloudiness (t)", ylab="Above cloudiness (t-1)", lwd=0.5)
block_below <- make_block(
df$below, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
plot(block_below[,2], block_below[,3], type="o", pch=18,
xlab="Below cloudiness (t)", ylab="Below cloudiness (t-1)", lwd=0.5)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:9, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:9, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020.csv")
# とりあえずプロット
df %>%
select(datetime, above, below) %>%
slice(1:200) %>%
pivot_longer(-datetime, "window", values_to="cloudiness") %>%
ggplot(aes(x=datetime, y=cloudiness)) +
geom_line(aes(color=window))
df <- df %>%
mutate(across(-datetime, scale)) %>%
unnest(-datetime)
block_above <- make_block(
df$above, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
plot(block_above[,2], block_above[,3], type="o", pch=18,
xlab="Above cloudiness (t)", ylab="Above cloudiness (t-1)", lwd=0.5)
block_below <- make_block(
df$below, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
plot(block_below[,2], block_below[,3], type="o", pch=18,
xlab="Below cloudiness (t)", ylab="Below cloudiness (t-1)", lwd=0.5)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
library(rEDM)
library(tidyverse)
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020_daily.csv")
library(rEDM)
library(tidyverse)
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020_daily.csv")
# とりあえずプロット
p <- df %>%
select(datetime, above, below) %>%
slice(1:200) %>%
pivot_longer(-datetime, "window", values_to="cloudiness") %>%
ggplot(aes(x=datetime, y=cloudiness)) +
geom_line(aes(color=window))
ggsave("cloudiness_daily.png",p, width=10, height=6)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020.csv")
# とりあえずプロット
p <- df %>%
select(datetime, above, below) %>%
slice(1:200) %>%
pivot_longer(-datetime, "window", values_to="cloudiness") %>%
ggplot(aes(x=datetime, y=cloudiness)) +
geom_line(aes(color=window))
df <- df %>%
mutate(across(-datetime, scale)) %>%
mutate(across(-datetime, as.vector))
block_above <- make_block(
df$above, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
p <- plot(block_above[,2], block_above[,3], type="o", pch=18,
xlab="Above cloudiness (t)", ylab="Above cloudiness (t-1)", lwd=0.5)
block_below <- make_block(
df$below, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
p <- plot(block_below[,2], block_below[,3], type="o", pch=18,
xlab="Below cloudiness (t)", ylab="Below cloudiness (t-1)", lwd=0.5)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
df
# 読み込みと標準化
df <- read_csv("data/senjo/predicted/2020_daily.csv")
df <- df %>%
mutate(across(-datetime, scale)) %>%
mutate(across(-datetime, as.vector))
block_above <- make_block(
df$above, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
p <- plot(block_above[,2], block_above[,3], type="o", pch=18,
xlab="Above cloudiness (t)", ylab="Above cloudiness (t-1)", lwd=0.5)
block_below <- make_block(
df$below, #元となる時系列データ
max_lag=2 #時間遅れ軸数（t=0を含む）
)
p <- plot(block_below[,2], block_below[,3], type="o", pch=18,
xlab="Below cloudiness (t)", ylab="Below cloudiness (t-1)", lwd=0.5)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:30, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:180, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:180, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
df <- read_csv("data/senjo/predicted/2020_daily.csv") %>%
mutate(across(-datetime, scale)) %>%
mutate(across(-datetime, as.vector)) %>%
mutate(across(.fns = function(v) {ifelse(is.nan(v), NA, v)})) %>%
fill(temperature, daylight_hours, .direction = "down")
df[is.nan(df)] <- NA
get_E <- function(vec) {
simplex(
vec,
E = 1:180,
stats_only = T
) %>%
arrange(-rho) %>%
slice(1) %>%
pull(E)
}
Es <- df %>%
select(-datetime) %>%
map(get_E) %>%
as_tibble()
Es
df
weathers <- c("daylight_hours", "humidity", "pressure", "temperature")
res_all <- read_csv("cm_result.csv")
res_all <- read_csv("ccm_result.csv")
366^-2
366^0.5
19*19
get_E <- function(vec) {
simplex(
vec,
E = 1:20,
stats_only = T
) %>%
arrange(-rho) %>%
slice(1) %>%
pull(E)
}
Es <- df %>%
select(-datetime) %>%
map(get_E) %>%
as_tibble()
Es
#最適埋め込み次元の探索
simp_above <- simplex(df$above,
E=1:20, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1,nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_above, type="o", pch=16)
plot(mae~E, simp_above, type="o", pch=16)
plot(rmse~E, simp_above, type="o", pch=16)
simp_below <- simplex(df$below,
E=1:20, #埋め込み次元を1~10まで試す
lib=c(1, nrow(df)), pred=c(1, nrow(df)),
stats_only=TRUE, #予測値は出力せず、統計量だけ出力する
silent=TRUE)
par(mfrow=c(1, 3), las=1)
plot(rho~E, simp_below, type="o", pch=16)
plot(mae~E, simp_below, type="o", pch=16)
plot(rmse~E, simp_below, type="o", pch=16)
Es
res_all <- read_csv("ccm_result.csv")
res_all
ggplot(res_all, aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(from~to)
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp)
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness")
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness", hjust = 0.5)
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness") +
theme(element_text(hjust = 0.5))
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness") +
theme(plot.title=element_text(hjust = 0.5))
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness") +
theme(plot.title=element_text(hjust = 0.5, size=10))
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness") +
theme(plot.title=element_text(hjust = 0.5, size=24))
res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness") +
theme(plot.title=element_text(hjust = 0.5, size=18))
ggsave("ccm_temperature", p_t)
ggsave("ccm_temperature.png", p_t)
p_t <- res_all %>%
filter(from == "temperature") %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle("Causality test from temperature to cloudiness") +
theme(plot.title=element_text(hjust = 0.5, size=18))
ggsave("ccm_temperature.png", p_t)
plot_ccm <- function(weather) {
p <- res_all %>%
filter(from == weather) %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle(str_c("Causality test from ", weather, " to cloudiness")) +
theme(plot.title=element_text(hjust = 0.5, size=18))
ggsave(str_c("ccm_", weather, ".png"), p)
}
weathers %>%
map(plot_ccm)
res_all %>%
filter((from == "above") | (from == "below"))
res_all %>%
filter((from == "above") | (from == "below")) %>%
ggplot(aes(x=lib_size, y=rho, color=surrogate)) +
geom_line() +
facet_grid(to~tp) +
ggtitle(str_c("Causality test between above and below cloudiness")) +
theme(plot.title=element_text(hjust = 0.5, size=18))
plot_ccm("above")
plot_ccm("below")
150 * 0.8
150 * 0.2
